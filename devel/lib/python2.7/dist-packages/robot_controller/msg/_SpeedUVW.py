# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_controller/SpeedUVW.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class SpeedUVW(genpy.Message):
  _md5sum = "bf1de8ae7418bff109196d08604e9fda"
  _type = "robot_controller/SpeedUVW"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool pose1
bool pose2
bool lVoila
bool rVoila
bool flat
bool leftArm
bool rightArm

#for following project
Header header
geometry_msgs/Vector3 pos
geometry_msgs/Vector3 vel

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['pose1','pose2','lVoila','rVoila','flat','leftArm','rightArm','header','pos','vel']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose1,pose2,lVoila,rVoila,flat,leftArm,rightArm,header,pos,vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpeedUVW, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pose1 is None:
        self.pose1 = False
      if self.pose2 is None:
        self.pose2 = False
      if self.lVoila is None:
        self.lVoila = False
      if self.rVoila is None:
        self.rVoila = False
      if self.flat is None:
        self.flat = False
      if self.leftArm is None:
        self.leftArm = False
      if self.rightArm is None:
        self.rightArm = False
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
    else:
      self.pose1 = False
      self.pose2 = False
      self.lVoila = False
      self.rVoila = False
      self.flat = False
      self.leftArm = False
      self.rightArm = False
      self.header = std_msgs.msg.Header()
      self.pos = geometry_msgs.msg.Vector3()
      self.vel = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7B3I.pack(_x.pose1, _x.pose2, _x.lVoila, _x.rVoila, _x.flat, _x.leftArm, _x.rightArm, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.pose1, _x.pose2, _x.lVoila, _x.rVoila, _x.flat, _x.leftArm, _x.rightArm, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_7B3I.unpack(str[start:end])
      self.pose1 = bool(self.pose1)
      self.pose2 = bool(self.pose2)
      self.lVoila = bool(self.lVoila)
      self.rVoila = bool(self.rVoila)
      self.flat = bool(self.flat)
      self.leftArm = bool(self.leftArm)
      self.rightArm = bool(self.rightArm)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7B3I.pack(_x.pose1, _x.pose2, _x.lVoila, _x.rVoila, _x.flat, _x.leftArm, _x.rightArm, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.pose1, _x.pose2, _x.lVoila, _x.rVoila, _x.flat, _x.leftArm, _x.rightArm, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_7B3I.unpack(str[start:end])
      self.pose1 = bool(self.pose1)
      self.pose2 = bool(self.pose2)
      self.lVoila = bool(self.lVoila)
      self.rVoila = bool(self.rVoila)
      self.flat = bool(self.flat)
      self.leftArm = bool(self.leftArm)
      self.rightArm = bool(self.rightArm)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
_struct_7B3I = struct.Struct("<7B3I")
