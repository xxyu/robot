// Generated by gencpp from file robot_controller/SpeedUVW.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROLLER_MESSAGE_SPEEDUVW_H
#define ROBOT_CONTROLLER_MESSAGE_SPEEDUVW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace robot_controller
{
template <class ContainerAllocator>
struct SpeedUVW_
{
  typedef SpeedUVW_<ContainerAllocator> Type;

  SpeedUVW_()
    : pose1(false)
    , pose2(false)
    , lVoila(false)
    , rVoila(false)
    , flat(false)
    , leftArm(false)
    , rightArm(false)
    , header()
    , pos()
    , vel()  {
    }
  SpeedUVW_(const ContainerAllocator& _alloc)
    : pose1(false)
    , pose2(false)
    , lVoila(false)
    , rVoila(false)
    , flat(false)
    , leftArm(false)
    , rightArm(false)
    , header(_alloc)
    , pos(_alloc)
    , vel(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _pose1_type;
  _pose1_type pose1;

   typedef uint8_t _pose2_type;
  _pose2_type pose2;

   typedef uint8_t _lVoila_type;
  _lVoila_type lVoila;

   typedef uint8_t _rVoila_type;
  _rVoila_type rVoila;

   typedef uint8_t _flat_type;
  _flat_type flat;

   typedef uint8_t _leftArm_type;
  _leftArm_type leftArm;

   typedef uint8_t _rightArm_type;
  _rightArm_type rightArm;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_type;
  _vel_type vel;




  typedef boost::shared_ptr< ::robot_controller::SpeedUVW_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_controller::SpeedUVW_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedUVW_

typedef ::robot_controller::SpeedUVW_<std::allocator<void> > SpeedUVW;

typedef boost::shared_ptr< ::robot_controller::SpeedUVW > SpeedUVWPtr;
typedef boost::shared_ptr< ::robot_controller::SpeedUVW const> SpeedUVWConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_controller::SpeedUVW_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_controller::SpeedUVW_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'robot_controller': ['/home/xxx/catkin_ws_robots/src/robot_controller/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_controller::SpeedUVW_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_controller::SpeedUVW_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_controller::SpeedUVW_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_controller::SpeedUVW_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_controller::SpeedUVW_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_controller::SpeedUVW_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_controller::SpeedUVW_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf1de8ae7418bff109196d08604e9fda";
  }

  static const char* value(const ::robot_controller::SpeedUVW_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf1de8ae7418bff1ULL;
  static const uint64_t static_value2 = 0x09196d08604e9fdaULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_controller::SpeedUVW_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_controller/SpeedUVW";
  }

  static const char* value(const ::robot_controller::SpeedUVW_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_controller::SpeedUVW_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool pose1\n\
bool pose2\n\
bool lVoila\n\
bool rVoila\n\
bool flat\n\
bool leftArm\n\
bool rightArm\n\
\n\
#for following project\n\
Header header\n\
geometry_msgs/Vector3 pos\n\
geometry_msgs/Vector3 vel\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::robot_controller::SpeedUVW_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_controller::SpeedUVW_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose1);
      stream.next(m.pose2);
      stream.next(m.lVoila);
      stream.next(m.rVoila);
      stream.next(m.flat);
      stream.next(m.leftArm);
      stream.next(m.rightArm);
      stream.next(m.header);
      stream.next(m.pos);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedUVW_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_controller::SpeedUVW_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_controller::SpeedUVW_<ContainerAllocator>& v)
  {
    s << indent << "pose1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pose1);
    s << indent << "pose2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pose2);
    s << indent << "lVoila: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lVoila);
    s << indent << "rVoila: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rVoila);
    s << indent << "flat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flat);
    s << indent << "leftArm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leftArm);
    s << indent << "rightArm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rightArm);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROLLER_MESSAGE_SPEEDUVW_H
